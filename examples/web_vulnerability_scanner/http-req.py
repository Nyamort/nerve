#!/usr/bin/env python3
import argparse
import requests

parser = argparse.ArgumentParser()

parser.add_argument('--url', dest='url')
parser.add_argument('--user_agent', dest='user_agent',
                    default="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36", help='the character name')
parser.add_argument('payload')

args = parser.parse_args()

headers = {
    'User-Agent': args.user_agent,
}

# do some normalization
path = args.payload if args.payload[0] == '/' else f"{args.payload}/"
url = args.url if not args.url[-1] == '/' else args.url[:-1]

# escape the query string if present
main = path
if '?' in path:
    main, querystr = path.split('?', 1)
    quoted = []
    for keyval in querystr.split('&'):
        if '=' in keyval:
            key, value = keyval.split('=', 1)
        else:
            key = keyval
            value = ''

        quoted.append(f"{key}={requests.utils.quote(value)}")

    path = '?'.join([main, '&'.join(quoted)])

# print(f"{url}{path}\n")

try:
    r = requests.get(f"{url}{path}", headers=headers, timeout=15)
    if r.raw.status == 200:
        print(f"HTTP/{r.raw.version/10} {r.raw.status} {r.raw.reason}")
        for k, v in r.raw.headers.items():
            print(f"{k}: {v}")
        print(r.text)

    else:
        print(f"{main} : {r.raw.reason}")
except Exception as e:
    print(f"ERROR for '{url}{path}': {e}")
